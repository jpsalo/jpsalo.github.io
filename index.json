[{"authors":null,"categories":null,"content":"Throughout their studies, students may encounter problems in their courses where they need help from their teachers or from their peers but lectures and other contact teaching sessions can be at unsuitable times. Even though many courses have their own communication channels for seeking help, there are situations where the subjective experience of learning is better when done in collaboration with peers. This brings us to the three things needed for successfully studying together: shared location, time and a common subject. In Stdy QRp, we evaluate how do we make it easy for students to arrange and participate in impromptu study groups and present an application which combines space, time and problem into creating an ad hoc study group. Our testing concentrated on determining the best way for creator to communicate the subject of the group to other students in order to reach and match with as many potential peers as possible. Users were asked to use the application with two different interfaces and messages, and then fill in a survey about their experience. It was found that for the group creator, it is easier to express their problem in their own words, but group participants may find messages with predetermined and more generic subjects easier to understand and thus they are potentially more likely to participate in these study groups. Application is here In detail, we investigate the effort to find peers at the ‘right time’ by creating an impromptu study group and how likely are people to join the group.\nNeedfinding Our study followed human-centered design process (Norman, 2013, Ch. 6): \u0026ldquo;Make observations on the intended target population, generate ideas, produce prototypes and test them.\u0026quot;\nStakeholder map represents all the people involved and is an additional verification that the student is at the core of the study, and thus students are the population we interviewed and the persona we based the PACT analysis.\n  Stakeholder map of people who gain or deliver value    Person: Student, 20-50 years\n  University level degree She can be either a new student from lower education or someone with experience from previous degrees or work etc. Most likely able to communicate in English Studies full-time or part-time while working, taking care of children for example   Activity: Learning \u0026amp; Information Seeking ⇔ Information Giving\n Based on the initial observation, people study couple of hours and take a break hourly. Lot of people are also short on time. Therefore the lecture and workshop schedules might conflict with other duties.\nIt’s essentially social activity: a student helps peer who is then receiving information. The purpose is to keep the group small, ideally between two people.\nThey can study the same course but basically they share knowledge of a common subject so that, for example, the information receiver is able to continue to finish her assignments.\n Context: UbiKampus (co-working space)\n  Since it’s a library, people have to behave accordingly People have roles but they are equal Within the library opening hours   Technology: Web / Mobile App (interface)\n  Location: QR code Peers: Chat  Interview \u0026amp; Observation findings The interview was done for five participants—three women and two men. They all study different things, one Bachelor’s student and four Master’s students. Their library use varies from daily to \u0026ldquo;not that often\u0026rdquo;. All participants study also in other libraries, such as Kaisa.\nInterview and observation focused mainly on library use and study environment and the combined findings suggest that people study, seek information and use computers. Finding a place to study or other students happens primarily by visually browsing the space and walking around, causing noises—even though it’s a library and speaking out loud is discouraged, it’s not as quiet as one would expect. People also don’t take breaks (leave their place) as regularly as they said in the interviews. It looks like that, in the evening in Kaisa house, group rooms could be utilized more efficiently, so ad hoc study groups could be potentially created there, in addition to Kumpula campus.\nBrainstorming, Design critique \u0026amp; More Brainstorming Even though the main idea and motivation for the system are simple, the end product is in many ways very different from the draft produced after brainstorming sessions—the goal for the sessions were to develop ideas without technical restrictions and time limitations, which were then converged into the end product.\nMajor design difference between the draft and end product related to connecting the system to physical space (via UbiKampus) and creating profiles for students. UbiKampus connection was intended to use bluetooth indoor navigation and message bus. Users were envisioned to have two profiles: information seeker and receiver, both profiles sharing same pool of predetermined topics of interest (i.e. in the context of Full Stack web development) in order to trivialize the complexity of matchmaking. In case of a match, the system would have notified users and potentially suggested free group study room.\nBased on the aforementioned features and after feedback from design critique and re-thinking of the concept, we implemented a system with same idea but with a more feasible approach.\nThe implementation (Stdy QRp) Our proposed solution is based on the idea of facilitating the room booking by leveraging QR codes and chat-based interaction. The rationale is that 1) QR codes placed at campus would allow people to access a smartphone application and to tie the group to the location; and that 2) A chat reach those students who likely have similar knowledge and ongoing courses. Student is asked to fill in a few details, and the time starts when the group is created. The subject of the group is then published on the Telegram channel of a course the student is attending. The solution could be integrated to existing course channels in Telegram.\nThe basic use case begins with reading the QR code of the room. The application tells the user that she is in a certain room.\n The application shows the selected room   Then the user fills the required information: subject or description of the group, user name and the course channel where the message (subject, time and place) will be published. Screenshots illustrate the two versions used in the evaluation.\n Group creation: variant A    Group creation: variant B    The appearance of the messages depends on the form in which the group was created   User Study In this chapter, we describe the purpose and procedure of the study and what do we measure; participants, how we recruited them and the instructions and tasks that we gave them. We implemented the system with an assumption that it would make easier for students to arrange and participate impromptu study groups, and a laboratory experiment was designed to get preliminary insights on the research questions about matchmaking and user experience.\nProcedure The experiment followed a within-subjects design with one independent variable (IV) being the way the group is created and it is designed to understand and measure to what extent the system really makes it easier and more likely for students to arrange and join impromptu study groups. We modified IV based on two questions: (1) Which kind of notification text would be more effective when creating impromptu study groups with a chat-based system; (2) Is matchmaking more efficient with specific than with generic subject description?\nWe recruited three (1M, 2F) Helsinki University students that were willing to use the app and were suitable for the study, based on the inclusion criterion: \u0026ldquo;Students of Full Stack course\u0026rdquo;. After the experiment, the participants were instructed to answer comparative questions about what are the advantages and disadvantages of using the system as opposed to other ways to find last minute help with their studies such as course chat. We also asked them to report their overall impressions of the system because collecting subjective feedback about \u0026ldquo;Your feelings about the study group\u0026rdquo; in combination with the comparative questions will provide more reliable answers.\nThe experiment investigates creating a group with two different ways: selecting best closest match for creator’s problem from predefined subjects (drop-down menu) vs. letting the creator express the subject of the group by her own words (free-text field). Then, the tone and content of the notification text sent by the IM bot is chosen to be either more terse or verbose. The participants are asked how well does the bot message and the subject of the group—that is, implicit or explicit description and notification—correspond with the given problem and what would increase the odds to match and reach as many relevant peers as possible.\nResults Effort to create a group The creator understood what the application is for and how to use it to achieve her goal. Group creation was also reported to be easy. Right selection for the problem was not as easy to find from predetermined list of group subjects as it was to describe it in own words.\nLikelihood to participate a group Peers are likely to join a study group set up by another person, no matter if they don’t know the creator or whether the creator is a student or a teacher. The group message was generally well understood but the predetermined subject of the group was preferred over the creator’s own description. The responses suggest that our system is an easy way to get to know about study groups, although the answers are not unanimous.\nSubjective feedback All participants believe technology can help in finding people to study with and that studying in a group affects positively to their study experience. They all have encountered a need to solve study problems with peers and have been in situations where they would have liked to find peers to study with, or as was written in one participant’s answer:\n\u0026ldquo;Many times when I get stuck, it would be better to discuss it with someone, many times it takes a lot more time to solve the problem while continuing working alone.\u0026quot;\nIt was found that the right selection for the problem the creator was facing was not as easy to find from predetermined list of group subjects as it was to describe it in own words, which presumably means that when people are stuck with specific problem, they are looking for specific answers. On the other hand, peers preferred predetermined subject of the group over the creator’s own description, which presumably means that people with accumulated knowledge about a subject are willing to help in a broad area of problems whereas explicit problem is not as relatable. Subjective feedback also indicate that the predetermined subject helps in recollecting what was done in a particular course. It’s arguably meaningful to describe problem explicitly in own words but the tradeoff is that chances to reach potential peers and matchmaking diminishes.\n","date":1557446400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557446400,"objectID":"57933ec12c203936ca81f08876d5c33a","permalink":"https://jpsalo.github.io/project/stdy-qrp/","publishdate":"2019-05-10T00:00:00Z","relpermalink":"/project/stdy-qrp/","section":"project","summary":"Helping students to find peers for a study group","tags":null,"title":"Stdy QRp","type":"project"},{"authors":null,"categories":null,"content":"HN Viz is an interactive data visualization application with Hacker News data for discovering interesting stories. The app shows 100 most voted and 100 most commented stories per each year in a bubble chart. Stories are divided into four category types: stories, jobs, projects and questions, and the bubble size is based on how many days was the discussion active. Contextual views show monthly statistics in bar charts, and also metadata of selected story with a link to the original thread on Hacker News. Application is here   How well did the story perform that month?   Problem Is a story worth reading? What could explain votes and comments and duration of discussion? Is a story with a lot of votes a \u0026ldquo;news\u0026rdquo; item and story with lot of comments a \u0026ldquo;discussion\u0026rdquo;? This project aimed to answer aforementioned questions throughout the process and, once the domain and technologies became more familiar, the unifying objective for the project became: \u0026ldquo;What does the data show about good stories?\u0026quot; (Fisher \u0026amp; Meyer, 2018, p. 34). As the objective suggests, knowledge discovery emerged as the main purpose of the visualization.\nDesign rationale The ideation and design drafts were done with lo-fi paper prototyping and while the method was not perfect, it was sufficient for this project. A relatively good tool for prototyping was found by stumbling upon Google Data Studio, a tool which allows exploration of the intermediate BigQuery jobs.\nIn regards of scatter plots, Fisher writes in Making Data Visual (Fisher \u0026amp; Meyer, 2018, p. 77): \u0026ldquo;At a large number of points, a scatterplot can become a black blob\u0026rdquo;, and the solution can be a bit overwhelming at first, which is against the information seeking mantra: \u0026ldquo;Overview first, zoom and filter, details on demand\u0026rdquo; (Shneiderman, 1996), so some planning was required to improve encoding of the data in order to avoid occlusion and it was alleviated by keeping the amount of stories per year in a reasonable small number. Area, hue, density and position are the visual encoding variables used in bubble chart. A future improvement could be to further split items with a type \u0026ldquo;story\u0026rdquo; by, for example, domain or meta stories (stories about Hacker News) etc. so the amount of stories could be increased.\nHow to gain an overview of the entire collection? What is application’s \u0026ldquo;null island\u0026rdquo;? These were some of the questions asked when the visualization was made fundamentally interactive by adding the contextual view. It turns out that, on average, author has only one \u0026ldquo;good\u0026rdquo; story so, instead of discovering information about the author, the implementation shows—by clicking a story—statistics from the month the story was posted in two separate bar charts, one with the number of votes and the other with the number of comments as y-axis, in descending order. Rationale for these views is to enable to see what other stories gained traction around the same time, i.e. details on demand. The addition of navigation between focused and contextual view in the form of monthly statistics bar chart brought the biggest challenge of the project: brushing and linking and interacting with multiple linked views.\nThe newly introduced detail view also required to take a step back and do some data cleaning, and raised the need to make a design decision on how to make interesting stories more visible, by taking into account the available data and feasibility of implementation. The bubble size—or, magnitude estimation—has couple things to consider, especially optimization of marker size by normalizing the duration based on the descendants of the story. Plotly Dash has an algorithm which helps with the scaling, and rest was achieved with simple arithmetics and a logarithmic scale to make stories with long discussion and less comments relatively more visible than the somewhat obviously interesting stories (i.e. lot of comments or votes). The implementation does a decent job in answering the question of \u0026ldquo;What does the data show about good stories?\u0026quot;\n","date":1557273600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557273600,"objectID":"6e4fe8f9ef7b8c90e49fa8f7c43a76f7","permalink":"https://jpsalo.github.io/project/hn-viz/","publishdate":"2019-05-08T00:00:00Z","relpermalink":"/project/hn-viz/","section":"project","summary":"Discovering interesting stories from Hacker News","tags":null,"title":"HN Viz","type":"project"},{"authors":null,"categories":null,"content":"You spend some of your best working hours focused on the software you use and not on the things you want to get done. Extended Mind provides a super simple, super fast, distraction-free replacement to cluttered office workflow tools. You can access Extended Mind from all of your devices to instantly manage your notes and tasks. This frees you to do what you do best: connect, create and collaborate.\nWhat is Extended Mind? Extended Mind is a minimalist, cross-platform, open source productivity service for note and task management.\nHow can I use it?\nExtended Mind gives you a place to store your private notes and tasks and to instantly access them using any of your devices.\nTo achieve super fast retrieving, Extended Mind gives tools to easily tag of notes and tasks, and also gives you instant full text search of all of your information. Instead of every single user coming up with their own tags, Extended Mind gives you a set of categories for items and also a set of well thought out public keywords.\nExtended Mind is free to use right away. Application is here Innovativeness The most unique aspect of Extended Mind is the strong scientific background and respect for human biology and psychology of our team, which guides the development of the service. For the service to become a true extended mind, the time it takes to both retrieve and store information has to be on par with our biological memory. This is why minimalism pervades the entire service: every unnecessary visual element and shiny feature will be removed if it distracts the user from the cognitive task she wants to perform. The service will be built using tools that provide the very best performance with the least amount of code. Extended Mind will always be focused on content and making it as easy and fast as possible to use it.\nAnother innovative feature of Extended Mind is the folderless storage of items. In Extended Mind every item can be grouped and associated to other items via a network of tags. Extended Mind gives you a set of well thought out categories and keywords that the user can start to use immediately, while still allowing the user the create her own tags.\nIn addition, the open source implementation of the service is a strong signal to the users that their information will never be exploited. This differentiates Extended Mind from the vast majority of technology startups, and is a good fit for the scientific method and the open access and open data movements.\nScreenshots  See your agenda for today    Quickly find your way around the app     Edit your notes on desktop   ","date":1446163200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1446163200,"objectID":"d1c633e772833fcf0dc0e30b98d0ef98","permalink":"https://jpsalo.github.io/project/em/","publishdate":"2015-10-30T00:00:00Z","relpermalink":"/project/em/","section":"project","summary":"Extended Mind is a minimal task and note organizer that helps you find and keep your focus","tags":null,"title":"Extended Mind","type":"project"},{"authors":null,"categories":null,"content":"Software engineering is inherently social profession and implementing software depends on collaboration between group members. Requirements do not necessarily originate from cutting edge high technology but from customer’s business needs, which brings a new set of problems to be solved—problems that are sociological, not technical. (Whitehead 2007; Fagerholm 2015; Fox, Sillito, \u0026amp; Maurer 2008; DeMarco \u0026amp; Lister 2013, p. 4) Additionally, the goal for many projects is to develop complex systems and design good user experience (UX). Responding to the changed demands for system quality attributes by incorporating design thinking, such as User-Centered Design (UCD), into iterative development is applicable to these circumstances but clear guidelines have not yet surfaced. (Ralph 2015; Fox, Sillito, \u0026amp; Maurer 2008; Kuusinen 2015; Magües, Castro, \u0026amp; Acuña 2016)\nSoftware systems are built by people. The cross-functional interdisciplinary group is a heterogeneous set of people from different backgrounds and initially they may have different—atomistic instead of holistic—perspective of what is important in the system under development (Holtzblatt \u0026amp; Beyer 2016, p. 82; Gothelf \u0026amp; Seiden 2016, p. 41). Software system is more than the sum of its parts, it has emergent properties, so the group that is implementing the system has to form a shared understanding to achieve conceptual integrity and ultimately a satisfactory UX.\nThis study examines how developers and designers form a shared understanding of the UX with collaboration. In this study, collaboration is defined as communication and producing artifacts. Collaboration is needed for problem solving and information sharing. Communication and the artifacts they produce are means to form a shared understanding among the group. The group switches freely between the activities of exploring the problem and solution space throughout the process and produces artifacts to represent the design intent.\nResearch questions The objective of this study is to examine how UX is acknowledged in product development—how a group of people is able to solve relevant problems in terms of the system’s life cycle and evolution so that they achieve satisfactory UX. This study targets iterative development, and how well it is applied in the context of user needs and requirements elicitation. The central theme is collaboration between developers and designers: what are the methods (e.g. UCD, Agile), how are those applied in practice and how do they acknowledge the term \u0026ldquo;user experience\u0026rdquo;.\nSpecifically, the focus of this study is collaborative software engineering, design thinking and UX. The main research problem addressed in this study is: What kind of knowledge is shared between developers and designers?\nRQ1: How do developers and designers form a shared understanding of the software system UX under development?\nRQ2: What are the artifacts utilized in their collaboration?\nResults The results are reported as follows: (1) Problem Conceptualization in Up-Front Design; (2) UX Confluences Between Developers and Designers; and (3) Artifacts Utilized in the Collaboration Between Developers and Designers. Section (1) will present the phase in the studied case where the UX was conceptualized. This section will describe the problem, users and their needs the participants identified and decided to converge to. This section will outline which quality attributes of the system are important for particular users (for example, learnability is important for the staff members). Sections (2) and (3) build upon the contents of section (1) will provide an answer to the research questions. The sections (2) and (3) will present the process followed and the artifacts utilized in the studied case as well as the phases within the process which are essential to achieve satisfactory UX.\nProblem Conceptualization in Up-Front Design People’s needs are somewhat static. Therefore they remain largely unchanged throughout the system’s lifecycle. The employees who were part of this phase spent substantial time to understand the needs of their customers. Once they were accumulated enough knowledge about the needs, they had the necessary data to understand what kind of user experience they are able to design for, that is, how to provide satisfactory user experience meanwhile the customer fulfills her need by using the system. They do it by reflecting the user experience in the system’s quality attributes\nUX Confluences Between Developers and Designers Three distinct phases within the process in the studied case were identified that are relevant for how developers and designers form shared understanding of the system UX under development: (1) Design Intent; (2) Design Handoff; and (3) Implementation. This chapter will decipher what happens in the process during these phases as well as what artifacts are used in collaboration between developers and designers during them. Some key artifacts are introduced here but a more in-depth analysis ir in the next chapter.\n  UX Confluences Between Developers and Designers   It was found that developers and designers form shared understanding of the system UX under development by UX confluences illustrated in the figure. They are \u0026ldquo;meeting points\u0026rdquo; within the process, so to say, where developers and designers should collaborate in order to achieve satisfactory UX. Next, the confluences are briefly presented, followed by rationale why are they important for the shared understanding of the UX.\nThe first confluence is called \u0026ldquo;Design intent\u0026rdquo; and it happens at the start of an iterative cycle. The company in the studied case is design-oriented and the team involves customers in the process as much as possible. In this confluence, the team tries to reflect customers’ needs in the system’s quality attributes and they do this by simulating customers’ behaviour with paper prototypes. In this confluence, the team tries to include as many diverse opinions as possible to think about the problem and then to converge into single solution.\nThe second confluence is \u0026ldquo;Design handoff\u0026rdquo; and at this point, the team has written use cases for this cycle and conclude that the design is \u0026ldquo;finished\u0026rdquo;. Design is represented as an interactive prototype in Zeplin tool.\n\u0026ldquo;Implementation\u0026rdquo; is the last confluence and it is at the end of the cycle. But instead of releasing, the developers will do quality assurance first by peer reviews and by demoing both internally within the team and externally to some customers to receive feedback.\nWhat makes these confluences important for UX? During \u0026ldquo;Design intent\u0026rdquo; lot of prioritizing happens. The team narrows down the scope and converge into solution which is represented as interactive prototype. This means that some of the essential knowledge about the UX is not documented anywhere and just gets lost. On the other hand, the developers should aim to represent the design intent with their implementation, not just the prototype and use cases they receive. And this is the key in this case. The developers are to a large extent responsible for the quality assurance. And, obviously, it’s the implementation, not the design intent the customers will use. And when the developers are part of \u0026ldquo;Design intent\u0026rdquo; confluence, they are able to draw the distinction between the core and peripheral functions of the solution so they can start writing automated tests for the core functionality instead of being unaware of the customers’ needs before they will provide feedback for the finished implementation. Because prioritizing and converging in this case means that they will implement some of the ideas now and others later which means that there will be changes. And by testing the core functionality, the developers are more prepared for changes and can also avoid the need for longer re-iteration but instead \u0026ldquo;build the thing right\u0026rdquo; at the first time.\nBut. Not every developer is design-oriented or interested in design and they are generally only part of the design handoff, which is perfectly fine but not necessarily good for the shared understanding of the UX.\n","date":1446163200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1446163200,"objectID":"1c1ed8b826c1622b2093b9fb7370f4b6","permalink":"https://jpsalo.github.io/project/shared-understanding/","publishdate":"2015-10-30T00:00:00Z","relpermalink":"/project/shared-understanding/","section":"project","summary":"A Case Study of Collaboration Between Developers and Designers","tags":null,"title":"Shared Understanding of the User Experience","type":"project"},{"authors":["jp"],"categories":null,"content":"JP is a usability enthusiast who focuses on optimizing every aspect of product development, from the end user experience to the code architecture. Currently he is finding ways to create the best designer-developer handoff.\nJP is a programmer since 2010 and specialize in frontend development. He has solid, hands-on experience in product development for the web, backed by CS, HCI and cognitive science studies. JP strives for elegant and future-proof solutions which are both efficient and intuitive to use.\nWorking at large and small companies and in projects of different scale and age has provided JP insight into team dynamics and business reasoning behind the code.\nJP believes that the users of a service can\u0026rsquo;t be an afterthought—these people should be at the core of the work. He understands the value of a genuine connection with the users and knows that the best result is achieved when everyone is as close to the people as possible. He enjoys being part of the early-stage prototyping with pen and paper and gets most satisfaction from building complex glitch-free UIs.\nJP specializes in User-Centered Design, including:\n Finding out people\u0026rsquo;s need with interviews and observation Prototype-oriented design and implementation Crafting, conducting and analysing usability studies Building interactive systems  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"fc52e94c4f9cd2c391b708e4cb3a0a5c","permalink":"https://jpsalo.github.io/me/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/me/","section":"","summary":"JP is a usability enthusiast who focuses on optimizing every aspect of product development, from the end user experience to the code architecture. Currently he is finding ways to create the best designer-developer handoff.\nJP is a programmer since 2010 and specialize in frontend development. He has solid, hands-on experience in product development for the web, backed by CS, HCI and cognitive science studies. JP strives for elegant and future-proof solutions which are both efficient and intuitive to use.","tags":null,"title":"","type":"me"}]